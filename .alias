# User specific aliases and functions

# Unregister evil ll alias
unalias ll

# Generic aliases
alias lssysd="systemctl list-units --type=service | grep running | sed 's/.*running \(.*\)$/\1/'"
alias blame='grep --exclude-dir=node_modules --exclude="*~" -rn . -ie'
alias ls="ls -B --color=auto"

### Git aliases
#   - initting
alias gi='git init'
alias gib='git init --bare'

#   - adding
alias ga='git add'
alias gaa='git add .'
alias gaaa='git add --all'
alias gau='git add --update'

#   - commiting
alias gc='git commit'
alias gcm='git commit --message'
alias gcf='git commit --fixup'

#   - checking out
alias gco='git checkout'
alias gcob='git checkout -b'
alias gcom='git checkout master'
alias gcos='git checkout staging'
alias gcod='git checkout develop'

#   - viewing logs and status
alias gll='git --no-pager log --pretty=oneline -10'
alias glg='git log --graph --oneline --decorate --all'
alias gld='git log --pretty=format:"%h %ad %s" --date=short --all'
alias gs='git status'
alias gss='git status --short'

#   - branching
alias gb='git branch'
alias gbd='git branch --delete '

#   - diffing
alias gd='git diff'
alias gda='git diff HEAD'

#   - merging and rebasing
alias gm='git merge --no-ff'
alias gma='git merge --abort'
alias gmc='git merge --continue'
alias gr='git rebase'

#   - fetching, pulling and pushing
alias gf='git fetch'
alias gpl='git pull'
alias gplr='git pull --rebase'
alias gps='git push'

#   - stashing
alias gst='git stash'
alias gsta='git stash apply'
alias gstd='git stash drop'
alias gstl='git stash list'
alias gstp='git stash pop'
alias gsts='git stash save'
### End of Git aliases

# Change bg property on .vimrc
alias bglight='sed -i "s/set bg=dark/set bg=light/" ~/.vimrc'
alias bgdark='sed -i "s/set bg=light/set bg=dark/" ~/.vimrc'

# Source goto methods
if [ -f '~/.goto.bash' ]; then
  . '~/.goto.bash'
fi

# Source .profile
if [ -f '~/.profile' ]; then 
  . '~/.profile'
fi

# Functions

# Name: gg
# Description: for git repo shortcuts
# Args:
#   $1: path to repo
# Example: alias repo1="gg /path/to/repo1"
function gg {
  cd $1
  git status
  git --no-pager log -n1
}

# Name: substitute
# Description: ubstitute files creating a backup
# Args: 
#   $1: file to be substituted
#   $2: file that substitutes $1
function substitute {
  if [ -f $1 ]; then
    cp $1 $1.old
  fi 
  cp $2 $1
}

# Name: dive
# Description: recursively go to biggest subdirectory. Output biggest file in leaf dir.
# Args: none
function dive () {
  find_biggest='sort -h <(du -chs *) | tail -2 | head -1 | cut -f2'
  biggest=$(eval $find_biggest)

  while [[ -d $biggest ]]; do
    cd $biggest
    biggest=$(eval $find_biggest)
  done

  # Output biggest file
  echo "Arrived to leaf directory. Biggest file is:"
  echo $(pwd)/$biggest
}
